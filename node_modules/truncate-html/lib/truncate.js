// Generated by CoffeeScript 1.12.3
var cheerio, helper, truncate;

cheerio = require('cheerio');

helper = {
  setup: function(length, options) {
    switch (typeof length) {
      case 'object':
        options = length;
        break;
      case 'number':
        if (typeof options === 'object') {
          options.length = length;
        } else {
          options = {
            length: length
          };
        }
    }
    options = this.extend(options, truncate.defaultOptions);
    if (options.excludes) {
      if (!Array.isArray(options.excludes)) {
        options.excludes = [options.excludes];
      }
      options.excludes = options.excludes.join(',');
    }
    this.options = options;
    this.limit = options.length;
    this.ellipsis = options.ellipsis;
    return this.keepWhitespaces = options.keepWhitespaces;
  },
  extend: function(obj, dft) {
    var k, v;
    if (obj == null) {
      obj = {};
    }
    for (k in dft) {
      v = dft[k];
      if (obj[k] != null) {
        continue;
      }
      obj[k] = v;
    }
    return obj;
  },
  isBlank: function(char) {
    return char === ' ' || char === '\f' || char === '\n' || char === '\r' || char === '\t' || char === '\v' || char === '\u00A0' || char === '\u2028' || char === '\u2029';
  },
  truncate: function(text) {
    if (!this.keepWhitespaces) {
      text = text.replace(/\s+/g, ' ');
    }
    if (this.options.byWords) {
      return this.truncateWords(text);
    } else {
      return this.truncateChars(text);
    }
  },
  truncateWords: function(str) {
    var curIsBlank, index, prevIsBlank, strLen, wordCount;
    strLen = str.length;
    if (!(this.limit && strLen)) {
      return '';
    }
    index = 0;
    wordCount = 0;
    prevIsBlank = true;
    curIsBlank = false;
    while (index < strLen) {
      curIsBlank = this.isBlank(str.charAt(index++));
      if (prevIsBlank === curIsBlank) {
        continue;
      }
      prevIsBlank = curIsBlank;
      if (wordCount === this.limit) {
        if (curIsBlank) {
          continue;
        }
        --index;
        break;
      }
      curIsBlank || ++wordCount;
    }
    this.limit -= wordCount;
    if (this.limit) {
      return str;
    } else {
      return str.substr(0, index) + this.ellipsis;
    }
  },
  truncateChars: function(str) {
    var charCount, curIsBlank, index, prevIsBlank, strLen;
    strLen = str.length;
    if (!(this.limit && strLen)) {
      return '';
    }
    index = 0;
    charCount = 0;
    prevIsBlank = false;
    curIsBlank = false;
    while (index < strLen) {
      curIsBlank = this.isBlank(str.charAt(index++));
      if (charCount === this.limit) {
        if (curIsBlank) {
          continue;
        }
        --index;
        break;
      }
      (curIsBlank && prevIsBlank === curIsBlank) || ++charCount;
      prevIsBlank = curIsBlank;
    }
    this.limit -= charCount;
    if (this.limit) {
      return str;
    } else {
      return str.substr(0, index) + this.ellipsis;
    }
  }
};


/**
 * truncate html
 * truncate(html, [length], [options])
 * @param  {String}        html    html string to truncate
 * @param  {Object|number} length
 * @param  {Object|null}   options
 *                         {
 *                           stripTags: false, // remove all tags, default false
 *                           ellipsis: '...', // ellipsis sign, default '...'
 *                           decodeEntities: false, // decode html entities before counting length, default false
 *                           excludes: '', // elements' selector you want ignore, default none
 *                           length: 10, // how many letters you want reserve, default none
 *                           byWords: false, // if true, length means how many words to reserve
 *                           keepWhitespaces: false // keep whitespaces, by default continuous spaces will be replaced with one space, default false
 *                         }
 * @return {String}
 * @example
 * truncate('<p>wweeweewewwe</p>', 10)
 * truncate('<p>wweeweewewwe</p>', 10, {stripTags: true})
 * truncate('<p>wweeweewewwe</p>', {stripTags: true, length: 10})
 */

truncate = function(html, length, options) {
  var $, $html, travelChildren;
  helper.setup(length, options);
  if (!html || isNaN(helper.limit) || helper.limit <= 0) {
    return html;
  }
  if (typeof html === 'object') {
    html = $(html).html();
  }
  $ = cheerio.load("<div>" + html + "</div>", {
    decodeEntities: helper.options.decodeEntities
  });
  $html = $('div').first();
  helper.options.excludes && $html.find(helper.options.excludes).remove();
  if (helper.options.stripTags) {
    return helper.truncate($html.text());
  }
  travelChildren = function($ele) {
    return $ele.contents().each(function() {
      switch (this.type) {
        case 'text':
          if (!helper.limit) {
            $(this).remove();
            return;
          }
          return this.data = helper.truncate($(this).text());
        case 'tag':
          if (!helper.limit) {
            $(this).remove();
          } else {
            return travelChildren($(this));
          }
          break;
        default:
          return $(this).remove();
      }
    });
  };
  travelChildren($html);
  return $html.html();
};

truncate.defaultOptions = {
  stripTags: false,
  ellipsis: '...',
  decodeEntities: false,
  byWords: false
};

module.exports = truncate;
